@using NPAManagement.ValidationFilters;
@model NPAManagement.Models.FollowUpDetailFor15DaysLetter
@if (this.ViewContext.FormContext == null)
{
    this.ViewContext.FormContext = new FormContext();
}
@{string idValueToAttach = $"15DaysLetter_{new Random().Next(1000, 9999)}{new Random().Next(1000, 9999)}{new Random().Next(10000, 99999)}{new Random().Next(1000, 9999)}";}
<div id="followUpDetailType_@idValueToAttach">
    <br />
    @Html.HiddenFor(model => model.EnableControls)
    @if (Model.EnableControls == false)
    {
        @Html.HiddenFor(model => model.DateOfIssuanceOfFollowUpLetter)
        @Html.HiddenFor(model => model.DateOfReceiptOfLetter)
        @Html.HiddenFor(model => model.ResponseOfBorrower)
        @Html.HiddenFor(model => model.NextActionToBeTaken)
        @Html.HiddenFor(model => model.DueDateOfNextAction)
    }
    @Html.HiddenFor(model => model.FollowUpMainId, new { @class = "form-control", @data_Model = "FollowUpMainId", @id = "FollowUpMainId" + (idValueToAttach) })
    @Html.HiddenFor(model => model.FollowUpTypeId, new { @class = "form-control", @data_Model = "FollowUpTypeId", @id = "FollowUpTypeId" + (idValueToAttach) })
    @Html.HiddenFor(model => model.FollowUpById, new { @class = "form-control", @data_Model = "FollowUpById", @id = "FollowUpById" + (idValueToAttach) })
    <div class="card">
        <div class="card-header" data-toggle="collapse" data-target="#collapseFollowUpDetail15DaysLetter_@idValueToAttach" aria-expanded="true" aria-controls="collapseFollowUpDetail15DaysLetter_@idValueToAttach">
            <h3>
                Follow-Up Detail By 15 Days Letter
            </h3>
        </div>
        <div class="collapse show" id="collapseFollowUpDetail15DaysLetter_@idValueToAttach">
            <div class="card-body">
                <div class="form-row">
                    @Html.LabelFor(model => model.DateOfIssuanceOfFollowUpLetter, htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.DateOfIssuanceOfFollowUpLetter, new { htmlAttributes = new { @class = "form-control date", @readOnly = "readOnly", @data_Model = "DateOfIssuanceOfFollowUpLetter", @id = "DateOfIssuanceOfFollowUpLetter" + (idValueToAttach) }.DisabledIf(Model.EnableControls == false) })
                        @Html.ValidationMessageFor(model => model.DateOfIssuanceOfFollowUpLetter, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.DateOfReceiptOfLetter, htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.DateOfReceiptOfLetter, new { htmlAttributes = new { @class = "form-control date", @readOnly = "readOnly", @data_Model = "DateOfReceiptOfLetter", @id = "DateOfReceiptOfLetter" + (idValueToAttach) }.DisabledIf(Model.EnableControls == false) })
                        @Html.ValidationMessageFor(model => model.DateOfReceiptOfLetter, "", new { @class = "text-danger" })
                    </div>
                </div>
                <hr />
                <div class="form-row">
                    @Html.LabelFor(model => model.ResponseOfBorrower, htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.ResponseOfBorrower, new { htmlAttributes = new { @class = "form-control", @data_Model = "ResponseOfBorrower" }.DisabledIf(Model.EnableControls == false) })
                        @Html.ValidationMessageFor(model => model.ResponseOfBorrower, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.NextActionToBeTaken, htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.NextActionToBeTaken, new { htmlAttributes = new { @class = "form-control", @data_Model = "NextActionToBeTaken" }.DisabledIf(Model.EnableControls == false) })
                        @Html.ValidationMessageFor(model => model.NextActionToBeTaken, "", new { @class = "text-danger" })
                    </div>
                </div>
                <hr />
                <div class="form-row">
                    @Html.LabelFor(model => model.DueDateOfNextAction, htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.DueDateOfNextAction, new { htmlAttributes = new { @class = "form-control date", @readOnly = "readOnly", @data_Model = "DueDateOfNextAction", @id = "DueDateOfNextAction" + (idValueToAttach) }.DisabledIf(Model.EnableControls == false) })
                        @Html.ValidationMessageFor(model => model.DueDateOfNextAction, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.ScanCopyOfActionTakenPath, htmlAttributes: new { @class = "control-label col-md-3 required" })
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.ScanCopyOfActionTakenFile, new { @type = "file", @class = "form-control-file upload-file-validated", @data_Model = "ScanCopyOfActionTakenFile", @id = "ScanCopyOfActionTakenFile" + (idValueToAttach) }.DisabledIf(Model.EnableControls == false))
                        @Html.HiddenFor(model => model.ScanCopyOfActionTakenFileType, new { @class = "scanCopyOfActionTakenFileType", @data_Model = "ScanCopyOfActionTakenFileType", @id = "ScanCopyOfActionTakenFileType" + (idValueToAttach) })
                    </div>
                </div>
                <div class="form-row">
                    @{
                        DirectoryInfo di = new DirectoryInfo(HttpContext.Current.Server.MapPath($"~/UploadedFiles/NPAID-{Model.NPAManagementId}/FLWTYPE-{Model.FollowUpById}/"));
                        if (Directory.Exists(HttpContext.Current.Server.MapPath($"~/UploadedFiles/NPAID-{Model.NPAManagementId}/FLWTYPE-{Model.FollowUpById}/")))
                        {
                            foreach (DirectoryInfo dir in di.GetDirectories())
                            {
                                if (Model.FollowUpMainId.ToString() == dir.Name)
                                {
                                    foreach (FileInfo file in dir.GetFiles())
                                    {
                                        <div class="offset-9 col-md-3">
                                            <a href="../@(file.FullName.Replace(HttpContext.Current.Request.PhysicalApplicationPath, String.Empty))" style="color:green" target="_blank">View Uploaded File</a>
                                        </div>
                                    }
                                }
                            }
                        }
                    }
                </div>
            </div>
        </div>
        <br />
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script type="text/javascript">
    $(document).ready(function () {
        debugger;
        $("#followUpDetailType_@(idValueToAttach) .date").datepicker({
            dateFormat: 'yy/mm/dd',
            changeMonth: true,
            changeYear: true
        });

        $('.dvFollowUpDetailGeneral').each(function () {
            var inputCtrl = $(this).find("input[type=file]")[0];
            var reader = new FileReader();
            if (inputCtrl !== undefined) {
                inputCtrl.addEventListener('change', (e) => {
                    reader.readAsDataURL(e.target.files[0]);
                    reader.onloadend = (evt) => {
                        if (evt.target.readyState === FileReader.DONE) {
                            if ($(e.target).val() !== '') {
                                $(e.target).attr("bytearr", reader.result.replace('data:', '').replace(/^.+,/, ''));
                                var inputFileName = $(this).find(".scanCopyOfActionTakenFileType")[0];
                                $(inputFileName).val($(inputCtrl).val().split('.').pop());
                            }
                        }
                    }
                });
            }
        });

        //Start//File Size and Extention validation
        $(".upload-file-validated").change(function () {
            if (fileExtValidate(this)) { // file extension validation function
                if (fileSizeValidate(this)) { // file size validation function

                }
            }
        });

        // function for  validate file extension
        //var validExt = ".png, .gif, .jpeg, .jpg, .pdf, .xls, .xlsx, .doc, .docx";
        var validExt = ".jpeg, .jpg, .pdf";
        function fileExtValidate(fdata) {
            var filePath = fdata.value;
            var getFileExt = filePath.substring(filePath.lastIndexOf('.') + 1).toLowerCase();
            var pos = validExt.indexOf(getFileExt);
            if (pos < 0) {
                debugger;
                $(fdata).val('');
                $(fdata).attr("bytearr", "");
                alert("This file is not allowed, please upload valid file.");
                return false;
            } else {
                return true;
            }
        }
        //function for validate file size
        var maxSize = '1024';
        function fileSizeValidate(fdata) {
            if (fdata.files && fdata.files[0]) {
                var fsize = fdata.files[0].size / 1024;
                if (fsize > maxSize) {
                    debugger;
                    $(fdata).val('');
                    $(fdata).attr("bytearr", "");
                    alert('Maximum file size exceed, This file size is: ' + fsize + "KB");
                    return false;
                } else {
                    return true;
                }
            }
        }
    //End//File Size and Extention validation
    });
</script>
